export enum BlockKind {
    // Variable
    variable = 'variable',
    // Types
    string_type = 'string_type',
    unit_type = 'unit_type',
    boolean_type = 'boolean_type',
    address_type = 'address_type',
    nat_type = 'nat_type',
    int_type = 'int_type',
    mutez_type = 'mutez_type',
    timestamp_type = 'timestamp_type',
    chain_id_type = 'chain_id_type',
    bytes_type = 'bytes_type',
    bls12_381_fr_type = 'bls12_381_fr_type',
    bls12_381_g1_type = 'bls12_381_g1_type',
    bls12_381_g2_type = 'bls12_381_g2_type',
    key_type = 'key_type',
    key_hash_type = 'key_hash_type',
    signature_type = 'signature_type',
    operation_type = 'operation_type',
    never_type = 'never_type',
    list_type = 'list_type',
    set_type = 'set_type',
    option_type = 'option_type',
    map_type = 'map_type',
    big_map_type = 'big_map_type',
    pair_type = 'pair_type',
    lambda_type = 'lambda_type',
    ticket_type = 'ticket_type',
    contract_type = 'contract_type',
    sapling_state_type = 'sapling_state_type',
    sapling_transaction_type = 'sapling_transaction_type',
    record_type = 'record_type',
    variant_type = 'variant_type',
    record_variant_field_type = 'record_variant_field_type',
    // Literals
    string_literal = 'string_literal',
    unit_literal = 'unit_literal',
    boolean_literal = 'boolean_literal',
    address_literal = 'address_literal',
    nat_literal = 'nat_literal',
    int_literal = 'int_literal',
    mutez_literal = 'mutez_literal',
    timestamp_literal = 'timestamp_literal',
    chain_id_literal = 'chain_id_literal',
    bytes_literal = 'bytes_literal',
    bls12_381_fr_literal = 'bls12_381_fr_literal',
    bls12_381_g1_literal = 'bls12_381_g1_literal',
    bls12_381_g2_literal = 'bls12_381_g2_literal',
    key_literal = 'key_literal',
    key_hash_literal = 'key_hash_literal',
    signature_literal = 'signature_literal',

    list_literal = 'list_literal',
    set_literal = 'set_literal',
    sequence_item = 'sequence_item',

    map_literal = 'map_literal',
    big_map_literal = 'big_map_literal',
    map_entry = 'map_entry',

    pair_literal = 'pair_literal',
    some_literal = 'some_literal',
    none_literal = 'none_literal',
    none_with_type_literal = 'none_with_type_literal',

    lambda_literal = 'lambda_literal',

    record_literal = 'record_literal',
    record_field = 'record_field',
    variant_value = 'variant_value',
    left_literal_block = 'left_literal_block',
    right_literal_block = 'right_literal_block',

    // Block & Operation Values
    get_amount_block = 'get_amount_block',
    get_balance_block = 'get_balance_block',
    get_chain_id_block = 'get_chain_id_block',
    get_level_block = 'get_level_block',
    get_timestamp_block = 'get_timestamp_block',
    get_current_contract_block = 'get_current_contract_block',
    get_current_contract_address_block = 'get_current_contract_address_block',
    get_sender_block = 'get_sender_block',
    get_source_block = 'get_source_block',
    get_total_voting_power_block = 'get_total_voting_power_block',
    get_voting_power = 'get_voting_power',

    // Expressions
    get_first_pair_element = 'get_first_pair_element',
    get_second_pair_element = 'get_second_pair_element',
    contract_storage_block = 'contract_storage_block',
    entrypoint_arg_block = 'entrypoint_arg_block',
    compare_block = 'compare_block',
    math_block = 'math_block',
    variables_get = 'variables_get',
    param_access = 'param_access',
    get_map_entries = 'get_map_entries',
    get_map_value = 'get_map_value',
    map_contains_key = 'map_contains_key',
    not = 'not',
    // Statements
    return_statement_block = 'return_statement_block',
    variable_declaration_block = 'variable_declaration_block',
    variable_setter_block = 'variable_setter_block',
    assert_block = 'assert_block',
    if_block = 'if_block',
    for_each_block = 'for_each_block',
    while_block = 'while_block',
    for_block = 'for_block',
    match_variant = 'match_variant',
    match_variant_case = 'match_variant_case',
    transfer_statement = 'transfer_statement',
    call_contract_statement = 'call_contract_statement',
    // Base
    type_compilation = 'type_compilation',
    value_compilation = 'value_compilation',
    entry_point_block = 'entry_point_block',
    contract_block = 'contract_block',
}

export default BlockKind;
